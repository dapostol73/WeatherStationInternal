#include "DisplayWeather.h"
#include "Icons/OpenWeatherIcons.h"

// 'snowflake_mask_sml', 9x10px
const uint8_t snowflake_mask_sml [] PROGMEM = {
	0x00, 0x00, 0x1c, 0x49, 0x7b, 0x54, 0x20, 0x00, 0x00, 
	0x00, 0x48, 0x71, 0xc7, 0xde, 0xcf, 0x76, 0x4c, 0x00, 
	0x5c, 0xd8, 0x72, 0x0b, 0xe0, 0x14, 0x65, 0xdd, 0x65, 
	0x95, 0xff, 0xe8, 0x47, 0xce, 0x48, 0xd7, 0xff, 0xa3, 
	0x8c, 0x55, 0x5e, 0xdc, 0x62, 0xe1, 0x6c, 0x4f, 0x8d, 
	0x8a, 0x47, 0x54, 0xdf, 0x5e, 0xe3, 0x64, 0x41, 0x8a, 
	0x92, 0xff, 0xea, 0x52, 0xd0, 0x54, 0xdb, 0xff, 0x9f, 
	0x57, 0xde, 0x76, 0x01, 0xda, 0x0c, 0x67, 0xe1, 0x5f, 
	0x00, 0x4e, 0x76, 0xc7, 0xe2, 0xcc, 0x7a, 0x4d, 0x00, 
	0x00, 0x00, 0x24, 0x56, 0x7e, 0x5d, 0x28, 0x00, 0x00
};

// 'snowflake_mask_med', 19x21px
const uint8_t snowflake_mask_med [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xda, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x89, 0x04, 0x38, 0xf7, 0x5e, 0x00, 0x87, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x17, 0x0d, 0x42, 0xf7, 0xc7, 0x70, 0xf5, 0x80, 0xaa, 0xf7, 0x5e, 0x04, 0x1a, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xe2, 0xdf, 0x00, 0x7b, 0xf7, 0xf7, 0xf5, 0xf7, 0xf7, 0x96, 0x00, 0xc1, 0xf7, 0x02, 0x00, 0x00, 
	0x06, 0x1e, 0x00, 0xb6, 0xf7, 0x10, 0x00, 0x8a, 0xf7, 0xf7, 0xf7, 0xa2, 0x00, 0x00, 0xf7, 0xd8, 0x00, 0x1c, 0x0b, 
	0x7f, 0xf7, 0x7e, 0x7e, 0xf7, 0x63, 0x00, 0x00, 0x91, 0xf7, 0xa8, 0x00, 0x00, 0x41, 0xf7, 0x90, 0x71, 0xf7, 0xa3, 
	0x3a, 0xd1, 0xf7, 0xf7, 0xf7, 0xab, 0x00, 0x00, 0x26, 0xf7, 0x4d, 0x00, 0x00, 0x8c, 0xf7, 0xf5, 0xf7, 0xdc, 0x4a, 
	0x00, 0x10, 0xbc, 0xf7, 0xf7, 0xf7, 0x41, 0x0b, 0x99, 0xf7, 0xb0, 0x0c, 0x30, 0xed, 0xf7, 0xf7, 0xcc, 0x20, 0x00, 
	0xa8, 0xec, 0xf7, 0xf7, 0xf5, 0xf7, 0xf7, 0xe4, 0xf7, 0xf7, 0xf7, 0xe5, 0xf7, 0xf7, 0xf4, 0xf7, 0xf7, 0xef, 0xb4, 
	0xd0, 0xec, 0x9a, 0x50, 0x1b, 0x36, 0xda, 0xf7, 0x9a, 0x27, 0x83, 0xf7, 0xed, 0x43, 0x1a, 0x49, 0x91, 0xe5, 0xdd, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xf7, 0x08, 0x00, 0x00, 0xf7, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xb2, 0xc4, 0x79, 0x39, 0x0a, 0x24, 0xc8, 0xf7, 0x88, 0x19, 0x70, 0xf7, 0xe1, 0x30, 0x09, 0x33, 0x70, 0xbe, 0xbb, 
	0xc1, 0xf7, 0xf7, 0xf7, 0xe3, 0xf7, 0xf7, 0xf4, 0xf7, 0xf3, 0xf7, 0xf5, 0xf7, 0xf7, 0xe3, 0xf7, 0xf7, 0xf7, 0xce, 
	0x00, 0x13, 0xc1, 0xf7, 0xf7, 0xf7, 0x55, 0x1b, 0xa7, 0xf7, 0xbc, 0x1d, 0x43, 0xf7, 0xf7, 0xf7, 0xd0, 0x24, 0x00, 
	0x27, 0xa9, 0xf7, 0xf7, 0xf7, 0xb3, 0x00, 0x00, 0x28, 0xf7, 0x4e, 0x00, 0x00, 0x95, 0xf7, 0xf7, 0xf7, 0xb6, 0x34, 
	0x85, 0xf7, 0x97, 0x88, 0xf7, 0x6d, 0x00, 0x00, 0x81, 0xf7, 0x9c, 0x00, 0x00, 0x4a, 0xf7, 0x97, 0x89, 0xf7, 0xab, 
	0x11, 0x37, 0x00, 0xa0, 0xf7, 0x19, 0x00, 0x72, 0xf7, 0xf7, 0xf7, 0x8a, 0x00, 0x05, 0xf7, 0xc3, 0x00, 0x34, 0x19, 
	0x00, 0x00, 0x00, 0xf4, 0xf6, 0x00, 0x62, 0xf7, 0xf7, 0xf5, 0xf7, 0xf7, 0x7d, 0x00, 0xd7, 0xf7, 0x01, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x2d, 0x24, 0x3c, 0xf7, 0xdd, 0x83, 0xf5, 0x8f, 0xc1, 0xf7, 0x56, 0x16, 0x32, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2e, 0xa9, 0x13, 0x34, 0xf7, 0x59, 0x00, 0xa6, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xdf, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'snowflake_mask_lrg', 38x41px
const uint8_t snowflake_mask_lrg [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0xde, 0xf6, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0xf6, 0xf6, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x2f, 0x00, 0x00, 0x00, 0xad, 0xf6, 0xf6, 0xe2, 0x08, 0x00, 0x00, 0x22, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xf6, 0xf6, 0x9c, 0x00, 0x00, 0xa6, 0xf6, 0xf6, 0xdb, 0x00, 0x00, 0x73, 0xf6, 0xf6, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xf6, 0xf6, 0xf6, 0x8f, 0x00, 0x9b, 0xf6, 0xf6, 0xd6, 0x00, 0x54, 0xf6, 0xf6, 0xf6, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x42, 0x00, 0x00, 0x5d, 0xf6, 0xf6, 0xf6, 0xf6, 0x7c, 0x8b, 0xf6, 0xf6, 0xb8, 0x74, 0xf6, 0xf6, 0xf6, 0xf6, 0x87, 0x00, 0x00, 0x31, 0x56, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0xf6, 0xf6, 0x8d, 0x00, 0x00, 0x63, 0xf6, 0xf6, 0xf6, 0xf2, 0xef, 0xf6, 0xf6, 0xf0, 0xf0, 0xf6, 0xf6, 0xf6, 0x94, 0x00, 0x00, 0x57, 0xf6, 0xf6, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0xf6, 0xf6, 0xd1, 0x00, 0x00, 0x00, 0x74, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x9d, 0x00, 0x00, 0x00, 0xb3, 0xf6, 0xf6, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0xf6, 0xf6, 0xf6, 0x20, 0x00, 0x00, 0x00, 0x62, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x90, 0x00, 0x00, 0x00, 0x00, 0xd8, 0xf6, 0xf6, 0xa6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x21, 0x9e, 0x59, 0x00, 0x00, 0x4e, 0xf6, 0xf6, 0xf6, 0x64, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x91, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xf6, 0xf6, 0xf6, 0x6b, 0x00, 0x00, 0x3d, 0xa6, 0x38, 0x00, 
	0x00, 0xc2, 0xf6, 0xf6, 0xba, 0x19, 0x04, 0xe4, 0xf6, 0xf6, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0xf6, 0xf6, 0xf6, 0xf6, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0xf6, 0xf6, 0xf6, 0x2f, 0x00, 0x9c, 0xf6, 0xf6, 0xef, 0x20, 
	0x14, 0xee, 0xf6, 0xf6, 0xf6, 0xf6, 0x80, 0xab, 0xf6, 0xf6, 0xed, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xf6, 0xf6, 0xdf, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0xba, 0xf6, 0xf6, 0xd4, 0x81, 0xf0, 0xf6, 0xf6, 0xf6, 0xf6, 0x48, 
	0x00, 0x70, 0xf6, 0xf6, 0xf6, 0xf6, 0xf4, 0xf2, 0xf6, 0xf6, 0xf6, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0xf6, 0xf6, 0xd9, 0x02, 0x00, 0x00, 0x00, 0x00, 0x24, 0xf6, 0xf6, 0xf6, 0xf3, 0xf3, 0xf6, 0xf6, 0xf6, 0xf6, 0x9e, 0x00, 
	0x00, 0x00, 0x33, 0xba, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0xf6, 0xf6, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xd1, 0x51, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x39, 0xf3, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xdd, 0x26, 0x00, 0x00, 0x00, 0x0d, 0xd4, 0xf6, 0xf6, 0xf6, 0x34, 0x00, 0x00, 0x00, 0x08, 0xc3, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x62, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x05, 0x44, 0x8a, 0xa3, 0xe4, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xa4, 0x1f, 0x80, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xa7, 0x1a, 0x7b, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf3, 0xac, 0x90, 0x57, 0x0d, 0x00, 
	0x48, 0xee, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x6e, 
	0xcc, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xd6, 0x7d, 0xb3, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xbc, 0xab, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xce, 0x79, 0xc3, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xda, 
	0x9f, 0xf6, 0xf6, 0xf6, 0xd8, 0x88, 0x46, 0x1c, 0x02, 0x00, 0x00, 0x38, 0xd1, 0xf6, 0xf6, 0xf6, 0xea, 0x58, 0x00, 0x00, 0x38, 0xd3, 0xf6, 0xf6, 0xf6, 0xed, 0x56, 0x00, 0x00, 0x00, 0x15, 0x3b, 0x78, 0xc9, 0xf6, 0xf6, 0xf6, 0xc1, 
	0x07, 0x78, 0x8a, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xf6, 0xf6, 0xf6, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x44, 0xf6, 0xf6, 0xf6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x79, 0x8d, 0x1f, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xf6, 0xf6, 0xf6, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf6, 0xf6, 0xf6, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x3e, 0x4e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0xf0, 0xf6, 0xf6, 0x7b, 0x00, 0x00, 0x00, 0x00, 0x40, 0xf6, 0xf6, 0xf6, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x4e, 0x05, 
	0x77, 0xf6, 0xf6, 0xe5, 0x99, 0x4d, 0x23, 0x03, 0x00, 0x00, 0x00, 0x12, 0xa5, 0xf6, 0xf6, 0xf6, 0xcf, 0x2b, 0x00, 0x00, 0x13, 0xb0, 0xf6, 0xf6, 0xf6, 0xcc, 0x29, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x41, 0x87, 0xd8, 0xf6, 0xf6, 0xa2, 
	0xcf, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xe8, 0x9c, 0x3e, 0x82, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x95, 0x7c, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xa6, 0x3a, 0x86, 0xdb, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xdb, 
	0x76, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x9f, 
	0x00, 0x2d, 0x87, 0xc1, 0xc7, 0xe6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xc8, 0x57, 0xa7, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xc7, 0x51, 0xa6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf0, 0xca, 0xc6, 0x98, 0x40, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x20, 0xe4, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0x5c, 0x00, 0x00, 0x00, 0x32, 0xeb, 0xf6, 0xf6, 0xf6, 0x5a, 0x00, 0x00, 0x00, 0x36, 0xe1, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x44, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x09, 0x7f, 0xe8, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0xf6, 0xf6, 0xda, 0x02, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x9e, 0x1e, 0x00, 0x00, 
	0x00, 0x41, 0xf4, 0xf6, 0xf6, 0xf6, 0xf6, 0xf5, 0xf6, 0xf6, 0xf6, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0xf6, 0xf6, 0xda, 0x02, 0x00, 0x00, 0x00, 0x00, 0x2d, 0xf6, 0xf6, 0xf6, 0xf5, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0x6a, 0x00, 
	0x10, 0xeb, 0xf6, 0xf6, 0xf6, 0xf6, 0xb0, 0xb8, 0xf6, 0xf6, 0xf6, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0xf6, 0xf6, 0xdb, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0xf6, 0xf6, 0xd3, 0xae, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x45, 
	0x06, 0xdd, 0xf6, 0xf6, 0xe0, 0x4e, 0x02, 0xcc, 0xf6, 0xf6, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xf6, 0xf6, 0xf6, 0xf6, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xf6, 0xf6, 0xf6, 0x25, 0x20, 0xcc, 0xf6, 0xf6, 0xf6, 0x37, 
	0x00, 0x41, 0xdd, 0x96, 0x07, 0x00, 0x47, 0xf6, 0xf6, 0xf6, 0x71, 0x00, 0x00, 0x00, 0x00, 0x31, 0xeb, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x60, 0x00, 0x00, 0x00, 0x00, 0x39, 0xf6, 0xf6, 0xf6, 0x65, 0x00, 0x00, 0x74, 0xe6, 0x63, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0xf6, 0xf6, 0xf6, 0x2b, 0x00, 0x00, 0x00, 0x38, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x62, 0x00, 0x00, 0x00, 0x05, 0xde, 0xf6, 0xf6, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xf6, 0xf6, 0xd9, 0x01, 0x00, 0x00, 0x49, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0xf6, 0x74, 0x00, 0x00, 0x00, 0xbe, 0xf6, 0xf6, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8d, 0xf6, 0xf6, 0xa7, 0x00, 0x00, 0x37, 0xf5, 0xf6, 0xf6, 0xf6, 0xf5, 0xf6, 0xf6, 0xf5, 0xf6, 0xf6, 0xf6, 0xf6, 0x63, 0x00, 0x00, 0x75, 0xf6, 0xf6, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x86, 0x81, 0x07, 0x00, 0x40, 0xf6, 0xf6, 0xf6, 0xf6, 0xa3, 0xa0, 0xf6, 0xf6, 0xc0, 0x9f, 0xf6, 0xf6, 0xf6, 0xf6, 0x67, 0x00, 0x00, 0x64, 0x9e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0xf6, 0xf6, 0xf6, 0xbd, 0x00, 0x93, 0xf6, 0xf6, 0xd0, 0x00, 0x83, 0xf6, 0xf6, 0xf6, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0xf6, 0xf6, 0xc7, 0x00, 0x00, 0xa6, 0xf6, 0xf6, 0xdb, 0x00, 0x00, 0x9f, 0xf6, 0xf6, 0xa9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x6d, 0x05, 0x00, 0x00, 0xab, 0xf6, 0xf6, 0xe1, 0x07, 0x00, 0x00, 0x53, 0x7a, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e, 0xf6, 0xf6, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0xf4, 0xf6, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


DisplayWeather::DisplayWeather()
{

}

void DisplayWeather::init()
{
    DisplayControl::init(1, &CalibriRegular8pt7b);
}

/// @brief Sun 24*24
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawSun(int16_t x, int16_t y, int16_t size, int16_t radius, uint16_t color)
{
	size = max(size, 1);
	radius *= size;
	getDisplay()->fillCircle(x+radius, y+radius, radius, color);
}

/// @brief Cloud is 58*36 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawCloud(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	size = max(size, 1);
	getDisplay()->fillCircle(10*size+x, 25*size+y, 11*size, color);
	getDisplay()->fillCircle(24*size+x, 12*size+y, 12*size, color);
	getDisplay()->fillCircle(41*size+x, 16*size+y, 7*size,  color);
	getDisplay()->fillCircle(50*size+x, 28*size+y, 8*size,  color);
	getDisplay()->fillRoundRect(30*size+x, 10*size+y, 19*size, 16*size, 7*size, color);
	getDisplay()->fillRoundRect(10*size+x, 26*size+y, 40*size, 11*size, 2*size, color);
	getDisplay()->fillRect(20*size+x, 20*size+y, 20*size, 6*size, color);
}

/// @brief Thunder is 12*22 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawThunder(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	size = max(size, 1);
	fillPolygon(4 * size + x, 0 * size + y,
				0 * size + x, 12 * size + y,
				4 * size + x, 12 * size + y,
				11 * size + x, 0 * size + y,
				color);
	fillPolygon(6 * size + x, 8 * size + y,
				12 * size + x, 8 * size + y,
				0 * size + x, 22 * size + y,
				1 * size + x, 18 * size + y,
				color);
}


void DisplayWeather::drawRainDrop(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	getDisplay()->fillTriangle(0*size+x, 2*size+y, 2*size+x, 0*size+y, 3*size+x, 3*size+y, color);
	getDisplay()->fillCircle(1*size+x,  4*size+y, size*2, color);
}

/// @brief Rain Heavy is 26*18 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawRainLight(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	size = max(size, 1);
	drawRainDrop(0*size+x,  4*size+y,  size, color);//r0.d0
	drawRainDrop(8*size+x,  0*size+y,  size, color);//r1.d0
	drawRainDrop(5*size+x,  11*size+y, size, color);//r1.d1
	drawRainDrop(14*size+x, 4*size+y, size, color);//r2.d2
	drawRainDrop(12*size+x, 15*size+y, size, color);//r2.d1
	drawRainDrop(22*size+x, 0*size+y, size, color);//r3.d0
	drawRainDrop(20*size+x, 11*size+y, size, color);//r3.d1
	drawRainDrop(28*size+x, 4*size+y,  size, color);//r4.d0
}

/// @brief Rain Heavy is 34*20 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawRainHeavy(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	size = max(size, 1);
	drawRainDrop(2*size+x, 4*size+y, size, color);//r0.d0
	drawRainDrop(0*size+x, 12*size+y, size, color);//r0.d1

	drawRainDrop(10*size+x, 0*size+y, size, color);//r1.d0
	drawRainDrop(8*size+x,  8*size+y, size, color);//r1.d1
	drawRainDrop(6*size+x,  16*size+y, size, color);//r1.d2

	drawRainDrop(16*size+x, 4*size+y, size, color);//r2.d0
	drawRainDrop(14*size+x, 12*size+y, size, color);//r2.d1
	//drawRainDrop(12*size+x, 20*size+y, size, color);//r2.d2
	
	drawRainDrop(24*size+x, 0*size+y, size, color);//r3.d0
	drawRainDrop(22*size+x, 8*size+y, size, color);//r3.d1
	drawRainDrop(20*size+x, 16*size+y, size, color);//r3.d2

	drawRainDrop(30*size+x, 4*size+y, size, color);//r4.d0
	drawRainDrop(28*size+x, 12*size+y, size, color);//r4.d1
}

/// @brief Snowflake is 9*10 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawSnowflake(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	if (size > 2)
	{
		drawMaskBitmap(x, y, 38, 41, snowflake_mask_lrg, color, BLACK, false, size-2);
	}
	else if (size == 2)
	{
		drawMaskBitmap(x, y, 19, 21, snowflake_mask_med, color, BLACK, false);
	}
	else
	{
		drawMaskBitmap(x, y, 9, 10, snowflake_mask_sml, color, BLACK, false);
	}	
}

/// @brief Snow is 32*18 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawSnow(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	drawSnowflake(x+0*size, y+2*size, size, color);
	drawSnowflake(x+12*size, y+8*size, size, color);
	drawSnowflake(x+22*size, y+0*size, size, color);
	//drawSnowflake(x+30*size, y+10*size, size, color);
}

/// @brief Fog is 26*18 at size 1
/// @param x 
/// @param y 
/// @param size 
/// @param color 
void DisplayWeather::drawFog(int16_t x, int16_t y, int16_t size, uint16_t color)
{
	int16_t height = (4*size)-1;
	getDisplay()->fillRoundRect(x+12*size, y+0*size,  16*size,  height, 2*size, color);
	getDisplay()->fillRoundRect(x+4*size,  y+6*size,  32*size, height, 2*size, color);
	getDisplay()->fillRoundRect(x+12*size, y+12*size, 40*size, height, 2*size, color);
	getDisplay()->fillRoundRect(x+0*size,  y+18*size, 40*size, height, 2*size, color);
	getDisplay()->fillRoundRect(x+8*size,  y+24*size, 40*size, height, 2*size, color);
	getDisplay()->fillRoundRect(x+12*size, y+30*size, 24*size, height, 2*size, color);
}

void DisplayWeather::draw00Unknown(int16_t x, int16_t y, int16_t size)
{
	x -= 29*size;
	y -= 18*size;
	drawCloud(x, y, size);
}

void DisplayWeather::draw01Clear(int16_t x, int16_t y, int16_t size)
{
	int16_t radius = 24;
	drawSun(x-radius*size, y-radius*size, radius, size);
}

void DisplayWeather::draw02FewClouds(int16_t x, int16_t y, int16_t size)
{
	x -= 31*size;
	y -= 21*size;
	drawSun(30*size+x, y, 16, size);
	drawCloud(x, 6*size+y, size);
}

void DisplayWeather::draw03ScatteredClouds(int16_t x, int16_t y, int16_t size)
{
	x -= 29*size;
	y -= 18*size;
	drawCloud(x, y, size);
}

void DisplayWeather::draw04BrokenClouds(int16_t x, int16_t y, int16_t size)
{
	x -= 30*size;
	y -= 21*size;
	drawCloud(12*size+x, y, size, DIMGRAY);
	drawCloud(x, 6*size+y, size);
}

void DisplayWeather::draw09ShowerRain(int16_t x, int16_t y, int16_t size)
{
	x -= 30*size;
	y -= 34*size;
	drawCloud(12*size+x, y, size, DIMGRAY);
	drawCloud(x, 6*size+y, size);
	drawRainHeavy(12*size+x, 40*size+y, size);
}

void DisplayWeather::draw10Rain(int16_t x, int16_t y, int16_t size)
{
	x -= 30*size;
	y -= 30*size;
	drawSun(30*size+x, y, 16, size);
	drawCloud(x, 6*size+y, size);
	drawRainLight(12*size+x, 42*size+y, size);
}

void DisplayWeather::draw11ThunderStorm(int16_t x, int16_t y, int16_t size)
{
	x -= 30*size;
	y -= 29*size;
	drawCloud(12*size+x, y, size, DIMGRAY);
	drawCloud(x, 6*size+y, size);
	drawThunder(18*size+x, 34*size+y, size);
}

void DisplayWeather::draw13Snow(int16_t x, int16_t y, int16_t size)
{
	x -= 30*size;
	y -= 31*size;
	drawCloud(12*size+x, y, size, DIMGRAY);
	drawCloud(x, 6*size+y, size);
	drawSnow(12*size+x, 44*size+y, size);
}

void DisplayWeather::draw50Mist(int16_t x, int16_t y, int16_t size)
{
	x -= 13*size;
	y -= 9*size;
	drawFog(x, y, size);
}

void DisplayWeather::drawWeatherIcon(int16_t x, int16_t y, String iconName, bool center, int16_t size)
{
	if (iconName == "01d" || iconName == "01n") draw01Clear(x, y, size);
	else if (iconName == "02d" || iconName == "02n") draw02FewClouds(x, y, size);
	else if (iconName == "03d" || iconName == "03n") draw03ScatteredClouds(x, y, size);
	else if (iconName == "04d" || iconName == "04n") draw04BrokenClouds(x, y, size);
	else if (iconName == "09d" || iconName == "09n") draw09ShowerRain(x, y, size);
	else if (iconName == "10d" || iconName == "10n") draw10Rain(x, y, size);
	else if (iconName == "11d" || iconName == "11n") draw11ThunderStorm(x, y, size);
	else if (iconName == "13d" || iconName == "13n") draw13Snow(x, y, size);
	else if (iconName == "50d" || iconName == "50n") draw50Mist(x, y, size);
	else draw00Unknown(x, y, size);
}

void DisplayWeather::drawTemperature(float temperature, bool isMetric, int16_t x, int16_t y, TextAlignment align, uint16_t foregroundColor)
{
	int16_t x1, y1 = 0;
    uint16_t w, h = 0;
    getDisplay()->getTextBounds("8", 0, 0, &x1, &y1, &w, &h);
	String temp = String(temperature, 1);
	if (align > 0)
	{
		int16_t sw = w * (temp.length() + 2);
        if (align == TEXT_CENTER)
        {
            x -= sw * 0.5;
            y -= h * 0.5;
        }
        else if (align == TEXT_RIGHT)
        {
            x -= sw + 1;
            //y -= h;
        }
	}

	drawString(temp, x, y, TEXT_LEFT, foregroundColor);
	int16_t radius = w * 0.5;
	x = getDisplay()->getCursorX() + radius;
	getDisplay()->drawCircle(x, y + radius-1, radius-1, foregroundColor);
	getDisplay()->drawCircle(x, y + radius-1, radius-2, foregroundColor);
	x += radius;
	if (isMetric)
	{
		drawString("C", x, y, TEXT_LEFT, foregroundColor);
	}
	else
	{
		drawString("F", x, y, TEXT_LEFT, foregroundColor);
	}
}

void DisplayWeather::drawDateTime(int16_t x, int16_t y)
{
	fillScreen(BLACK);
	setFont(&CalibriBold24pt7b);
	char buff[20];
	sprintf_P(buff, PSTR("%s, %d %s %d"), WDAY_NAMES[weekday()-1].c_str(), day(), MONTH_NAMES[month()-1].c_str(), year());
	drawString(buff, 240, 140, TEXT_CENTER, CYAN);

	sprintf_P(buff, PSTR("%d:%02d %s"), hourFormat12(), minute(), (isAM() ? "AM" : "PM"));
	drawString(buff, 240, 180, TEXT_CENTER, CYAN);
}

void DisplayWeather::drawCurrentWeather(OpenWeatherMapCurrentData *currentWeather, int16_t x, int16_t y)
{
	x = 240;
	y = 40;
	fillScreen(BLACK);
	drawWeatherIcon(x, y + 90, currentWeather->icon, true, 2);
	setFont(&CalibriBold24pt7b);
	drawString(currentWeather->cityName, x, y + 5, TEXT_CENTER, YELLOW);
	setFont(&CalibriBold16pt7b);
	drawTemperature(currentWeather->temp, m_isMetric, x, y + 160, TEXT_CENTER, CYAN);
	drawString(currentWeather->description, x, y + 200, TEXT_CENTER, ORANGE);
}

void DisplayWeather::drawForecastDetails(OpenWeatherMapForecastData *forecastWeather, int16_t x, int16_t y, int16_t dayIndex) 
{
	time_t observationTimestamp = forecastWeather[dayIndex].observationTime;
	int16_t day = weekday(observationTimestamp)-1;
	drawWeatherIcon(x, y + 100, forecastWeather[dayIndex].icon, true, 2);
	setFont(&CalibriBold16pt7b);
	drawString(WDAY_NAMES[day], x, y + 10, TEXT_CENTER, YELLOW);
	drawTemperature(forecastWeather[dayIndex].temp, m_isMetric, x, y + 180, TEXT_CENTER, CYAN);
	setFont(&CalibriBold8pt7b);
	drawString(forecastWeather[dayIndex].description, x, y + 210, TEXT_CENTER, ORANGE);	
}

void DisplayWeather::drawForecast(OpenWeatherMapForecastData *forecastWeather, int16_t x, int16_t y) 
{
	fillScreen(BLACK);
	//setFont(&CalibriBold24pt7b);
	//drawString(forecastWeather[0].cityName, 240, 40, TEXT_CENTER, YELLOW);
	drawForecastDetails(forecastWeather, 80,  40, 0);
	drawForecastDetails(forecastWeather, 240, 40, 1);
	drawForecastDetails(forecastWeather, 400, 40, 2);	
}

/// @brief Default size when set to 1 is 12x12
/// @param x 
/// @param y 
/// @param size 
void DisplayWeather::drawWiFiSignal(int16_t x, int16_t y, int16_t size)
{
	size = max(size, 1);
	if (WiFi.status() == WL_CONNECTED)
	{
		int32_t strength = WiFi.RSSI();
		getDisplay()->fillRect(x,        y+size*9, size*2, size*3,  strength > -80 ? WHITE : DIMGRAY);
		getDisplay()->fillRect(x+size*3, y+size*6, size*2, size*6,  strength > -70 ? WHITE : DIMGRAY);
		getDisplay()->fillRect(x+size*6, y+size*3, size*2, size*9,  strength > -60 ? WHITE : DIMGRAY);
		getDisplay()->fillRect(x+size*9, y,        size*2, size*12, strength > -45 ? WHITE : DIMGRAY);
	}
	else
	{
		int16_t ly = y + size * 5;
		int16_t lw = size*10;
		for (int16_t t=0; t < size * 2; t++)
		{
			getDisplay()->drawFastHLine(x+2, ly+t, lw, ORANGERED);
		}
		int16_t r = 6*size;
		int16_t cx = x+r;
		int16_t cy = y+r;
		for (int16_t t=0; t < size * 2; t++)
		{
			getDisplay()->drawCircle(cx, cy, r-t, ORANGERED);
		}		
	}
}

void DisplayWeather::drawHeader(bool currentWeathersUpdated, bool forecastWeathersUpdated, time_t timeUpdated)
{
	getDisplay()->fillRect(0, 0, 480, 12, CHARCOAL);
	getDisplay()->drawFastHLine(0, 13, 480, CYAN);
	getDisplay()->drawFastHLine(0, 14, 480, CYAN);

	setFont(&CalibriBold8pt7b);
	drawChar(4, 0, 'C', currentWeathersUpdated ? GREEN : RED);
	drawChar(20, 0, 'F', forecastWeathersUpdated ? GREEN : RED);
    sprintf(m_lastTimeUpdated, "%02d/%02d/%04d -- %02d:%02d:%02d", 
            month(timeUpdated), day(timeUpdated), year(timeUpdated), 
            hour(timeUpdated), minute(timeUpdated), second(timeUpdated));
	drawString(m_lastTimeUpdated, 480, 0, TEXT_RIGHT);	
}

void DisplayWeather::drawFooter(OpenWeatherMapCurrentData *currentWeather)
{
	char time[10];
	sprintf_P(time, PSTR("%02d:%02d"), hour(), minute());

	getDisplay()->fillRect(0, 280, 480, 320, CHARCOAL);
	getDisplay()->drawFastHLine(0, 278, 480, CYAN);
	getDisplay()->drawFastHLine(0, 279, 480, CYAN);
	setFont(&CalibriBold16pt7b);
	
	drawString(time, 120, 300, TEXT_CENTER, ORANGE);
	//Serial.println(String(currentWeather->temp));
	drawTemperature(currentWeather->temp, m_isMetric, 360, 300, TEXT_CENTER, ORANGE);
	drawWiFiSignal(450, 286, 2);
}
